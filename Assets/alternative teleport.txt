if (Input.GetAxis(f2) != 0) //same thing for the other projectile, you get the idea
            {
                //chargeTeleportTime += Time.deltaTime;
                //GetComponent<SpriteRenderer>().color = Color.Lerp(GetComponent<SpriteRenderer>().color, Color.black, 0.02f);
                //if (chargeTeleportTime >= 0)
                if (canFire2)
                {
                    if (Input.GetAxis(hAim) != 0 || Input.GetAxis(vAim) != 0)
                    {
                        if (teleportsLeft>0)
                        {
                            canFire2 = false;
                            //fireVector = new Vector2(Input.GetAxis(hAim), -Input.GetAxis(vAim)).normalized;
                            //GameObject newBullet = Instantiate(bullet2, wandEnd.transform.position, Quaternion.identity);
                            //newBullet.GetComponent<BulletSwitchBehavior>().SetWhoFiredMe(gameObject);
                            //Physics2D.IgnoreCollision(GetComponent<Collider2D>(), newBullet.GetComponent<Collider2D>());
                            //Physics2D.IgnoreCollision(GetComponentInChildren<Collider2D>(), newBullet.GetComponent<Collider2D>());
                            //newBullet.GetComponent<Rigidbody2D>().AddForce(fireVector * fireSpeed);
                            //chargeTeleportTime = 0;
                            //GetComponent<SpriteRenderer>().color = originalcolor;
                            teleportsLeft--;
                            teleportCounterUI.GetComponent<Text>().text = teleportsLeft.ToString();

                            fireVector = new Vector2(Input.GetAxis(hAim), -Input.GetAxis(vAim)).normalized;
                            
                            RaycastHit2D hit = Physics2D.Raycast(wandEnd.transform.position, fireVector);
                            if (hit.collider != null)
                            {
                                if (hit.collider.gameObject.tag != "Immovable"&& hit.collider.gameObject.tag != "Goal") //when colliding with something that is not immovable switch its position with the player's, and the destroy self.
                                {
                                    StartCoroutine(WaitAndTeleport(hit));
                                }
                                else
                                {
                                    StartCoroutine(WaitAndTurnOffLineRenderer());
                                }
                            }
                            else
                            {
                                StartCoroutine(WaitAndTurnOffLineRenderer());
                            }

                            GetComponent<LineRenderer>().enabled = true;
                            GetComponent<LineRenderer>().SetPosition(0, wandEnd.transform.position);
                            GetComponent<LineRenderer>().SetPosition(1, hit.point);
                        }
                        
                    }
                }


            }
            else
            {
                //chargeTeleportTime = 0;
                //GetComponent<SpriteRenderer>().color = originalcolor;
                canFire2 = true;
            }